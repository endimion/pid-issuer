"use client";
import { usePathname } from "next/navigation";
import { Inter } from "next/font/google";
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

import Link from "next/link";
import { useEffect, useState } from "react";

import Logo from "./logo.png";
import ewcLogo from "./ewcLogo.webp";
import MobileSideBar from "@/components/mobileSidebar.jsx";
import FullConsentModal from "@/components/fullConsentModal.jsx";

// export const metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({ children }) {
  const pathname = usePathname();
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [showConsent, setShowConsent] = useState(false);

  const [windowSize, setWindowSize] = useState({
    width: 0,
    height: 0,
  });

  useEffect(() => {
    // Check if window is defined (to avoid server-side rendering issues)
    if (typeof window !== "undefined") {
      const handleResize = () => {
        setWindowSize({
          width: window.innerWidth,
          height: window.innerHeight,
        });
      };

      // Set initial size
      setWindowSize({
        width: window.innerWidth,
        height: window.innerHeight,
      });

      // Add event listener to update dimensions on window resize
      window.addEventListener("resize", handleResize);

      // Clean up the event listener on component unmount
      return () => {
        window.removeEventListener("resize", handleResize);
      };
    }
  }, []); // Empty dependency array ensures the effect runs only once on mount

  
  const clickConsent = (event) => {
    // console.log("clicked!");
    event.preventDefault();
    setShowConsent(true);
  };


  const onConsentClose = () =>{
    console.log("consent closed");
    setShowConsent(false)
  }

  const homeLinkText =
    windowSize.width >= 640 ? (
      <>
        {IconSearch()}
        <span
          className="truncate mx-4 font-medium text-black text-xl"
          style={{
            color: ` ${pathname === "/" ? "white" : ""}`,
          }}
        >
          Search
        </span>
      </>
    ) : (
      <>{IconSearch()}</>
    );
  const generateTicketsLink =
    windowSize.width >= 640 ? (
      <>
        {IconTicket()}

        <span
          className="truncate mx-4 font-medium text-black text-xl"
          style={{
            color: ` ${pathname === "/tickets/viewTickets" ? "white" : ""}`,
          }}
        >
          Tickets
        </span>
      </>
    ) : (
      <>{IconTicket()}</>
    );

  const generateBoardingPassLink =
    windowSize.width >= 640 ? (
      <>
        {IconQrcode()}
        <span
          className="truncate mx-4 font-medium text-black text-xl"
          style={{
            color: ` ${pathname === "/tickets/issue" ? "white" : ""}`,
          }}
        >
          B.Pass
        </span>
      </>
    ) : (
      <> {IconQrcode()}</>
    );

  return (
    <html lang="en">
      <body className={inter.className}>
        <div className="flex flex-col h-screen bg-gray-400 dark:bg-gray-100">
          <header
            style={{ backgroundColor: "#ff0017!important" }}
            className="flex items-center justify-center"
          >
            <img
              alt="Company Logo"
              className="mr-2"
              height={32}
              src={Logo.src}
              style={
                {
                  // aspectRatio: "32/32",
                }
              }
              width={300}
            />
          </header>

          <div className="flex flex-col flex-grow mx-auto w-4/5">
            <div className="mt-8 flex justify-center items-center bg-blue-950 dark:bg-blue-950 py-4 px-6">
              <h1 className="text-2xl font-semibold text-white">
                Find Your Tickets
              </h1>
            </div>

            <div className="flex flex-grow">
              {/* Conditional rendering for navigation based on isMenuOpen and screen size */}

              {windowSize.width >= 640 ? (
                <div className="w-1/6 bg-white dark:bg-white-800">
                  <nav className={`mt-4 px-6 sm:block`}>
                    <Link
                      className={`flex items-center mt-4 py-2 px-6 dark:bg-opacity-25 ${
                        pathname === "/"
                          ? "bg-blue-950 dark:bg-blue-950 text-white"
                          : ""
                      }`}
                      href="/"
                      style={{
                        backgroundColor: ` ${
                          pathname === "/" ? "#1e1854" : ""
                        }`,
                      }}
                    >
                      {homeLinkText}
                    </Link>
                    <Link
                      className={`flex items-center mt-4 py-2 px-6 dark:bg-opacity-25 ${
                        pathname === "/tickets/viewTickets"
                          ? "bg-gray-300 text-white"
                          : "" // Highlight the active link
                      }`}
                      href="/tickets/viewTickets"
                      style={{
                        backgroundColor: ` ${
                          pathname === "/tickets/viewTickets" ? "#1e1854" : ""
                        }`,
                      }}
                    >
                      {generateTicketsLink}
                    </Link>
                    <Link
                      className={`flex items-center mt-4 py-2 px-6 dark:bg-opacity-25 ${
                        pathname === "/tickets/issue"
                          ? "bg-gray-300 text-white"
                          : "" // Highlight the active link
                      }`}
                      href="#"
                      style={{
                        backgroundColor: ` ${
                          pathname === "/tickets/issue" ? "#1e1854" : ""
                        }`,
                      }}
                    >
                      {generateBoardingPassLink}
                    </Link>
                    {/* Add more menu items as needed */}
                  </nav>
                </div>
              ) : (
                <></>
              )}

              {isMenuOpen && windowSize.width < 640 ? (
                <MobileSideBar
                  windowSize={windowSize}
                  isMenuOpen={isMenuOpen}
                  pathname={pathname}
                />
              ) : (
                <></>
              )}

              {/* Hamburger icon for small screens */}
              <button
                className="sm:hidden absolute top-4 right-4"
                onClick={() => setIsMenuOpen(!isMenuOpen)}
              >
                <svg
                  className="w-6 h-6 fill-current text-white"
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 24 24"
                >
                  {/* Hamburger icon lines */}
                  {isMenuOpen ? (
                    <path
                      fillRule="evenodd"
                      clipRule="evenodd"
                      d="M3 6h18v2H3V6zm0 5h18v2H3v-2zm0 5h18v2H3v-2z"
                    />
                  ) : (
                    <path
                      fillRule="evenodd"
                      clipRule="evenodd"
                      d="M4 6h16v2H4V6zm0 5h16v2H4v-2zm0 5h16v2H4v-2z"
                    />
                  )}
                </svg>
              </button>
              <main className="flex-1">{children}</main>
            </div>
          </div>
          {/* <footer className="bg-blue-950 dark:bg-blue-950 p-16">
            <p className="text-center text-sm text-white dark:text-gray-300">
              © 2023 Company Name. All rights reserved.
            </p>
          </footer> */}

          <footer className="bg-blue-950 p-8 flex flex-col md:flex-row md:items-center md:justify-between space-y-4 md:space-y-0">
            <div className="w-full md:w-1/3 md:pr-4">
              <div className="flex flex-col md:flex-row items-center md:space-x-4">
                <img
                  alt="Footer Image 1"
                  className="aspect-[1/1] md:h-32 md:w-32 overflow-hidden rounded-lg object-contain"
                  src={ewcLogo.src}
                />

                <p className="text-sm font-semibold text-white w-full md:w-auto">
                  The EWC project is co-funded by the EU’s Digital Europe
                  Programme under Grant Agreement – GAP-101102744
                </p>
              </div>
            </div>
            <div className="w-full md:w-1/3 md:text-center">
              <p className="text-lg font-semibold text-white">
                Developed by UAegean i4m lab
              </p>
              {/* Privacy Policy link under the developer text */}
              <Link href="#" legacyBehavior={true}>
                <a
                  onClick={clickConsent}
                  className="text-sm text-white hover:underline mt-2 md:mt-4 block"
                >
                  Read our Privacy Policy
                </a>
              </Link>
            </div>
            <div className="w-full md:w-1/3 md:pl-4">
              <div className="flex flex-col space-y-2 md:text-center">
                <h2 className="text-lg font-semibold text-white">Contact Us</h2>
                <p className="text-sm font-semibold text-white">
                  Email: info@i4mlab-aegean.gr
                </p>
                <p className="text-sm font-semibold text-white">
                  Phone: +1 234 567 890
                </p>
              </div>
            </div>
          </footer>
        </div>
        {showConsent && <FullConsentModal initialState={true} consentClose={onConsentClose}/>}
      </body>
    </html>
  );
}

function IconQrcode(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <rect width="5" height="5" x="3" y="3" rx="1" />
      <rect width="5" height="5" x="16" y="3" rx="1" />
      <rect width="5" height="5" x="3" y="16" rx="1" />
      <path d="M21 16h-3a2 2 0 0 0-2 2v3" />
      <path d="M21 21v.01" />
      <path d="M12 7v3a2 2 0 0 1-2 2H7" />
      <path d="M3 12h.01" />
      <path d="M12 3h.01" />
      <path d="M12 16v.01" />
      <path d="M16 12h1" />
      <path d="M21 12v.01" />
      <path d="M12 21v-1" />
    </svg>
  );
}

function IconTicket(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z" />
      <path d="M13 5v2" />
      <path d="M13 17v2" />
      <path d="M13 11v2" />
    </svg>
  );
}

function IconSearch(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="11" cy="11" r="8" />
      <path d="m21 21-4.3-4.3" />
    </svg>
  );
}
